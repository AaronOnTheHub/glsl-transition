{
  "name": "qimage",
  "version": "1.1.0",
  "description": "Simple Promise Image Loader based on Q",
  "keywords": [
    "q",
    "promise",
    "image",
    "loader",
    "browser"
  ],
  "author": {
    "name": "GaÃ«tan Renaudeau",
    "email": "renaudeau.gaetan@gmail.com"
  },
  "contributors": [
    {
      "name": "Paul Panserrieu",
      "email": "paul@42loops.com"
    }
  ],
  "dependencies": {
    "q": "0.9.x"
  },
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-cli": "~0.1.9",
    "grunt-contrib-jshint": "~0.6.0",
    "grunt-contrib-uglify": "~0.2.2",
    "grunt-docco": "~0.2.0",
    "grunt-contrib-qunit": "~0.2.2",
    "grunt-contrib-watch": "~0.4.4"
  },
  "main": "src/qimage.js",
  "license": "BSD",
  "repository": {
    "type": "git",
    "url": "git://github.com/gre/qimage.git"
  },
  "readme": "Qimage [![Build Status](https://travis-ci.org/gre/qimage.png?branch=master)](https://travis-ci.org/gre/qimage)\n===\n\n**Qimage** is a simple Promise Image Loader library based on Q.\n\n[Checkout the Annotated Source Code](http://greweb.me/qimage/docs/qimage.html)\n\nInstallation\n---\n\n```sh\nbower install qimage\n```\n\nAlso available on [NPM](https://npmjs.org/package/qimage).\n\nUsage\n---\n\n`Qimage` takes an URL *(string)* and returns a *Promise of Image*.\n\n**`Qimage(url: String, options) => Promise[Image]`**\n\n### Simple example\n\n```javascript\nQimage(\"images/foo.png\").then(function (img) {\n  document.body.appendChild(img);\n}, function (error) {\n  document.body.innerHTML = \"Unable to load the image\";\n});\n```\n\n### Making Anonymous crossOrigin request\n\n```javascript\nQimage(\"https://example.com/image.jpg\", { crossOrigin: \"Anonymous\" })\n  .then(function (img) {\n    // I'm now allowed to draw img on a Canvas for instance. (CORS restriction)\n  });\n```\n\n### Multiple image loading\n\n```javascript\nQ.all([\n  Qimage(\"res1.png\"),\n  Qimage(\"res2.png\"),\n  Qimage(\"res3.png\")\n])\n.spread(function (res1, res2, res3) {\n  document.body.appendChild(res1);\n  document.body.appendChild(res2);\n  document.body.appendChild(res3);\n});\n```\n\n### Mixing with Qajax\n\n```javascript\nQajax.getJSON(\"http://my-image-service.com/images/today.json?limit=10\")\n.get(\"images\") // my json has an \"images\" array\n.then(function (images) {\n  // wait all images to load\n  return Q.all(_.map(images, function (image) {\n    return Qimage(image.url);\n  }));\n})\n.then(function (imgs) {\n  templatize(imgs);\n})\n.fail(displayError);\n```\n\n### Support for CORS\n\n```javascript\nQimage(\"http://example.png/foo.png\", { crossorigin: \"Anonymous\" }).then(function (img) {\n  canvasctx.drawImage(img);\n});\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/gre/qimage/issues"
  },
  "_id": "qimage@1.1.0",
  "_from": "qimage@1.1.0"
}
